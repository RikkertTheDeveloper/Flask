#!/usr/bin/env node

/**
    * Flask.js, an exensible testing suite for the JavaScript ecosystem.   
    * @author Rick Arendsen
*/

//* Define used libraries within the application.
const flask_generation = require("./packages/@flask-generation/src")

const path = require('path');
const console = require('console');
const file_system = require('fs');
const { exit } = require("process");

//* Register the text templates used throughout the application:
const commandArgument_current = process.argv[2]

const textTemplate_generationMessage = "\x1b[33m\x1b[0m\x1b[33mFlask.js -\x1b[0m \x1b[28mSuccessfully generated \x1b[30mflask.config.js\x1b[0m\x1b[28m file.\x1b[0m\x1b[0m"
const textTemplate_noTestsFolder = "\x1b[33m\x1b[0m\x1b[33mFlask.js -\x1b[0m \x1b[31mCould not find tests folder in: \x1b[30m%s\x1b[0m"
const textTemplate_startMessage = "\x1b[33m\x1b[0m\x1b[33mFlask.js -\x1b[0m \x1b[35mCommencing Tests\x1b[0m\x1b[30m - %s\n\x1b[0m"
const textTemplate_endMessage = "\n\x1b[33mTests Completed\x1b[0m\x1b[31m - ✖ %d Failed -\x1b[0m\x1b[32m ✔ %d Passed\x1b[0m\x1b[30m - %s\n\x1b[0m"
const textTemplate_errorMessage = "\x1b[29m* \x1b[0m\x1b[30m%s:\x1b[0m \x1b[31m✖ Failed\x1b[0m\x1b[28m - %dms\x1b[0m"
const textTemplate_successMessage = "\x1b[29m* \x1b[0m\x1b[30m%s:\x1b[0m \x1b[32m✔ Passed\x1b[0m\x1b[28m - %dms \x1b[0m"
const textTemplate_referToConfig = "\x1b[33m\x1b[0m\x1b[33mFlask.js -\x1b[0m \x1b[28mPlease refer to your \x1b[30mflask.config.js\x1b[0m\x1b[28m file if your test folder was not set correctly.\x1b[0m\x1b[0m"

//* Commence assertions before starting test suite:
const project_rootAddress = path.resolve(".");
const config_file_address = path.resolve("flask.config.js");
const config_file_exists = file_system.existsSync(config_file_address);

//* If all assertions pass, start testing the files.
if(!config_file_exists) {
    console.log(textTemplate_generationMessage)
    flask_generation.generateConfig(project_rootAddress)
    process.exit(0)
}

//* Execute the command;
const configuration_values = require(config_file_address)
const testingFolder_address = path.resolve(configuration_values.tests_location);
const testFolderExists = file_system.existsSync(testingFolder_address);

function wrap_test_result(callback) {
    try {
        return callback()
    } catch (_) {
        return false
    }
}

if(testFolderExists && commandArgument_current == undefined) {
    const currentSession_dateObject = new Date()
    console.log(textTemplate_startMessage, `${currentSession_dateObject.toLocaleDateString()}: ${currentSession_dateObject.toLocaleTimeString()}`)

    //* Read out command line input, and loop over test folder.
    file_system.readdir(testingFolder_address, function(errorMessage, allTests) {
        let testFiles_failed = 0;
        let testFiles_successful = 0;

        //* Loop through all test files:
        allTests.forEach(function (test, index) {

            //* Format the correct information about the test.
            const currentTest_startTime = new Date(); 
            const currentTest_file = require(`${testingFolder_address}/${test}`);

            //* Execute the test function and gather the time the function took:
            const initialResult = wrap_test_result(currentTest_file.default);
            const currentTest_result = (initialResult == undefined ? true : initialResult);
            const currentTest_endTime = new Date() - currentTest_startTime

            //* Compute the result of the test:
            switch (currentTest_result) {
                case true:
                    console.log(textTemplate_successMessage, test, currentTest_endTime)
                    testFiles_successful++;
                    break;
            
                default:
                    console.log(textTemplate_errorMessage, test, currentTest_endTime)
                    testFiles_failed++;
                    break;
            }
        });

        //* Upon suite completion, register what the result was:
        const currentSession_dateObjectEnd = new Date()
        console.log(textTemplate_endMessage, testFiles_failed, testFiles_successful, `${currentSession_dateObjectEnd.toLocaleDateString()}: ${currentSession_dateObjectEnd.toLocaleTimeString()}`)
    }) 
} else {
    if(commandArgument_current == undefined) {
        if(!testFolderExists) {
            console.log(textTemplate_noTestsFolder, testingFolder_address)
            console.log(textTemplate_referToConfig)
        }
    } else {
        const commandArgument_parameter = process.argv[3];

        //* In case that we do want to execute a command, the logic for this command will
        //* Be executed in this section.
        switch (commandArgument_current) {
            case "generate":
                if(testFolderExists) {
                    flask_generation.generateTest(project_rootAddress, commandArgument_parameter)
                } else {
                    console.log(textTemplate_referToConfig)
                }
                break;
            default:
                break;
        }
    }
}